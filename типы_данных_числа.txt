Сегодня мы поговорим о числах.
Вещественные и целые числа относятся к одному типу данных. Также можем добавить, что все числа в js вещественные.
Числовой тип данных позволяет представить целые числа, в диапазоне между -2 в  53-1 степени и 2 в 53-1 степени.

Также к числам с плавающей запятой и к числовому типу данных относятся также три символьные величины: +бесконечность, -бесконечность, и NaN (не-число).

В js Вы можете использовать 4 типа числовых литералов: 
	- десятичный, 
	- двоичный, 
	- восьмеричный,
	- шестнадцатеричный.

Десятичные числа
	просмотрим в консоли
	12222
	42
	Далее https://esprima.org просмотрим синтаксическое дерево

	// Надо помнить что использование нулей в начале чисел приводит к разной обработке например:

	0888 // 888 обрабатывается как десятичное
	0777 // обрабатывается как восьмеричное в нестрогой форме (511 в десятичной)

	**Обратите внимание, что десятичные литералы могут начинаться с нуля (0) за которым следует другая десятичная цифра, но если следующая за нулем цифра меньше 8, то число обрабатывается как восьмеричное.

Двоичные числа
	При использовании двоичных чисел ведущий 0 за которым следует латинская буква "B" в верхнем или нижнем регистре (0b or 0B). Если цифры после 0b не являются 0 или 1, то будет сгенерированно SyntaxError с сообщением: "Missing binary digits after 0b".
	
Восьмеричные числа
	В синтаксисе используем ноль в начале. Если цифры после 0 не входят в диапазон от 0 до 7, число будет интерпретированно как десятичное.
		let n = 071; // 57
		let m = 061; // 49
		let s = 089 //89	

Шестнадцатеричные числа
	Синтаксис  шестнадцатеричных чисел исользует ведущий 0 за которым следует латинская буква "X" в верхнем или нижнем регистре (0x or 0X). Если цифры после 0x не входят в диапазон (0123456789ABCDEF),  то будет сгенерированно SyntaxError с сообщением: "Identifier starts immediately after numeric literal".
	let a = 0XA  //10

