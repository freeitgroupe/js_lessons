prototype  и __proto__
=======================================
prototype - есть не у каждого объекта.
__proto__ - есть у каждого объекта.
=======================================

Рассмотрим объекты
let a = {value: 18} // объект а и только один

// объекты b, c ссылаются на объект а.
let b = {age: a} // b.age - сссылается на объект а
let c = a; // c - ссылается на объект а


console.log(a === b.age) // true - так как ссылаемся а один и тот же объект
console.log(a === c) // true - так как ссылаемся а один и тот же объект

b.age.value = 21; // поменяли данные в объекте a.
console.log(a === b.age) // true,

console.log({} == {}) - false // так как это разные объекты

===========================================================
__proto__ - есть у всех объектов (но есть микро исключения)
===========================================================
/* man это объект и  у него есть прото */
let man = {}            // man.__proto__

/* users массив и это объект у него есть прото*/
let users = []          // users.__proto__

/* age это примитив, если к примитиву обращаться как кобъекту
то в памяти временно создается объектная модель этого примитива 
и у него тоже есть прото
*/
let age = 18            // age.__proto__

/*
text это примитив, если к примитиву обращаться как кобъекту
то в памяти временно создается объектная модель этого примитива 
и у него тоже есть прото
*/
let text = "text"       // age.__proto__

/* nameFunc создается при помощи function declaration
функция это объект и у нее есть прото.
*/
function nameFunc(){}   // nameFunc.__proto__

/* func - function expression, в func присваиваем безымянную ф-ю, func ссылается на объект ф-ии и у нее есть прото 
*/
let func = function(){} // func.__proto__

/* func1 ссылается на стрелочную ф-ю, которая является объектом и нее есть прото */
let func1 = () => {}    // func1.__proto__

/* nameClass - класс или прокачанная ф-я это объект и него есть прото */
class nameClass{}       // nameClass.__proto__

/* bool - булевое значение, если к нему обратиться как к объекту то временно создается объектная модель в памяти этого примитива 
и у него тоже есть прото */
let bool = true         // bool.__proto__
============================================
__proto__ одинаковых по типу объектов равны
============================================
let age = 18
let age1 = 21
console.log(age.__proto__ == age1.__proto__ ) // true

let str1 = "str1";
let str2 = "str2";
console.log(str1.__proto__ == str2.__proto__ ) // true

console.log(age.__proto__ === str1.__proto__) // false так как age и str2 разные по типу объекты.








