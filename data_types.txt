Некоторые моменты при изучении языка будем тестировать через консоль браузера.
Чтобы попасть в консоль браузера необходима использовать сочетание клавишь
---------
Windows / Linux: any of the following options.
Ctrl + Shift + J
Ctrl + Shift + I

Mac OS: 
Cmd + Opt + J

Очистить консоль
Ctrl+L

Типы данных. (snobusn)
 String
 Number 
 Object
 Boolean 
 Undefined
 Symbol (в ECMAScript 2015)
 Null
 
 BigInt - очень редко используется.   
 Символы являются нововведением JavaScript начиная с ECMAScript 2015. Символ — это уникальное и иммутабельное примитивное значение, которое может быть использовано как ключ для свойства объекта (о б этом типе данных мы поговорим позже). 
Например:  
//7 простых видов данных. 
Проинициализируем переменные т.е. зададим первичные значения для переменной.

let myNumber = 10; //Числа
let myString = 'string'; // строки
let myBoolean = true; // Логические значения или булиев тип, может быть TRUE или FALSE
let myUndef = undefined; // Undefined
let myNull = null // Null

//О типах данных символ и большое целое, мы поговорим чуть позже, но а записываются они в таком виде
let sym1 = Symbol(); 
let sym2 = Symbol("foo");
let bigInt = 19241924124n;


Null и Undefined говорят об отсутствии значения.

Переменная, не имеющая присвоенного значения, обладает типом undefined. Также возвращают undefined метод или инструкция, если переменная, участвующая в вычислениях, не имеет присвоенного значения. Функция возвращает undefined, если она не возвращает какого-либо значения.

Поскольку undefined не является зарезервированным словом, он может использоваться в качестве идентификатора (имени переменной) в любой области видимости, за исключением глобальной.

// печатает 'foo string'
(function(){ var undefined = 'foo'; console.log(undefined, typeof undefined); })();
// печатает 'foo string'
(function(undefined){ 
console.log(undefined, typeof undefined); 
})('foo');



В этой инструкции объявление все инициализируещие значения называются литералами соответствующего типа, кроме Undefined, Undefined - является индентификатаром.

В данном случае myNumber идентификатор переменной.Идентификаторы переменной могут начинаться с буквы, символа подчеркивания или знака доллара. Не могут начинаться с числа, это сделанно для того, чтобы парсеру было проще различать идентифакаторы и числа. Также в javaScript есть список зарезервированных слов, которые нельзя использовать в качестве идентификатаров переменной.

Выведим в консоли Выше описанные переменные 
Для определения типа переменной есть унарный оператор typeOf().

console.log(typeof myNumber); //Number
console.log(typeof myString); //String
console.log(typeof myBoolean); //Boolean
console.log(typeof myUndef); //Undefined
console.log(typeof myNull); //object, это ошибка в яваскрипт

Объектные типы данных 
let myObj = {name:"test"},
	array = [1,2,3],
	regexp = /w+/g,
	func = function(){};
	
Чтобы убедиться в этом выведем эти переменные в консоль
console.log(typeof myObj); //object
console.log(typeof array); //object
console.log(typeof regexp);//object
console.log(typeof func); //function - еще некоторая особенность оператора typeof о которой поговорим позже.

JavaScript, это язык с динамической типизацией, тип переменной определяется интерпретатором взависимимости от присвоенного ей значения. Таким образом у переменной нет типа. В яваскрипт есть автоматическое  преобразование типов, если интерпритатор ожидает увидеть в каком то месте логический тип данных, то он постарается преобразовать значение к ожидаемому типу.


	






